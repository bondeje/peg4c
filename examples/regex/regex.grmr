export = re
import = reparser

punctuator:
    '*' | '|' | '.' | '^' | '$' | '?' | '(' | ')' | '[' | ']' | '-' | '=' | '!'

// characters are any unescaped normal printing characters. cannot be "." else sequence will capture everything
character:
    "[^\\\\\\^$.[|()*?]" // don't need to escape { and + because they are handled in preprocess
    // "[^\\\\^$.\\[|()*+?{]"

any_character:
    "."

re_escape:
    "\\\\"

token:
    punctuator | character | re_escape | any_character // any_character just to capture anything else. Note for multibyte, this must change

// characters that must be escaped: \^$.[|()*+?{
nonclass_escape:
    "[\\\\\\^$.[|()*?]" // don't need to escape { and + because they are handled in preprocess
    // "[\\\\^$.\\[|()*+?{]"

// build symbol should just pass the char_class or build character from single_car, which may be recursive
symbol(re_build_symbol):
    char_class | re_escape, nonclass_escape | '$' | '.' | '^' | character

non_lparen:
    "[^)]"

lookaround(re_build_lookahead):
    '(', '?', ('=' | '!'), (re_escape, ')' | non_lparen)+, ')'

element(re_pass):
    lookaround | '(', choice, ')' | symbol

// characters that must be escaped: \%-[]
character_class:
    "[^\\\\\\-\\]\\^]"
    //"[^\\\\\\%\\-\\[\\]]"

class_escape:
    "[\\\\\\-\\]\\^]"
    //"[\\\\\\%\\-\\[\\]]"
    
char_class:
    '[', '^'?, (range | re_escape, class_escape | character_class)+, ']'

range(re_check_range):
    // need to change this to (re_escape, class_escape | character_class), '-', (re_escape, class_escape | character_class)
    (re_escape, class_escape | character_class), '-', (re_escape, class_escape | character_class)

choice(re_build_choice):
    '|'.sequence

sequence(re_build_sequence):
    (kleene | optional | element)+

optional(re_build_optional):
    element, '?'

kleene(re_build_kleene):
    element, '*'

re(re_build_nfa):
    choice