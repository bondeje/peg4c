export = re
import = reparser

punctuator:
    '*' | '\' | '|' | '+' | '.' | '^' | '?' | '(' | ')' | '[' | ']' | '{' | '}' | '-' | ','

character:
    '.'

token:
    punctuator | character

single_char:
    '\', character | character

// build symbol should just pass the char_class or build character from single_car, which may be recursive
symbol(re_build_symbol):
    char_class | single_char

element(re_pass):
    '(', choice, ')' | symbol

char_class:
    '[', '^'?, (range | single_char)+, ']'

range:
    character, '-', character

choice(re_build_choice_states):
    '|'.sequence

digit_seq:
    "[0-9]+"

sequence(re_build_sequence_states):
    repeated_rule+

repeated_rule(re_build_repeat_states):
    // one of the three internal digit_seq?, ','?, digit_seq? must be presnt
    element, ('+' | '*' | '?' | '{', digit_seq?, ','?, digit_seq?, '}')? 

re:
    choice