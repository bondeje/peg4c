export = c
import = cparser

c:
	external_declaration+

punctuator: '%:%:' | '...' | '<<=' | '>>=' | '::' | '->' | '++' | '--' | '&=' | '##' | 
	'*=' | '+=' | '-=' | '/=' | '%=' | '<=' | '>=' | '>>' | '==' | '!=' | '^=' | '||' | 
	'&&' | '|=' | '<<' | '<:' | ':>' | '<%' | '%>' | '%:' | ';' | '=' | '*' | '/' | '%' | 
	'+'  | '-' | '>' | '&' | '^' | '|' | ',' | '#' | '<' | '[' | ']' | '(' | ')' | '{' | 
	'}' | '.' | '~' | '!' | '?' | ':'

keyword:
      'alignas'         /* C23 (macro pre-C23) */
    | 'alignof'         /* C23 (macro pre-C23) */
	| 'asm' 			// standard C extension (see Annex J). used by gcc, etc.
	| 'auto'  
    | 'bool'			/* C23 (macro pre-C23) */
	| 'break' 
    | 'case' 
    | 'char' 
	| 'constexpr'		// C23
    | 'const'
    | 'continue' 
    | 'default'
	| 'defined'
	| 'define'
    | 'double'
	| 'do' 
	| 'elifndef'
	| 'elifdef'
	| 'elif'
    | 'else'
	| 'embed'
	| 'endif' 
    | 'enum'
	| 'error'
    | 'extern'
	| 'false' 
    | 'float'
	| 'for' 
    | 'goto'
	| 'ifndef'
	| 'ifdef'
    | 'if'
	| 'include'
    | 'inline' 
	| 'int'
	| 'line'
	| 'long' 
	| 'macro'
	| 'nullptr'			// C23
	| 'pragma'			// needed to capture pragma lines that survive pre-processing
	| 'register' 
    | 'restrict' 
    | 'return' 
    | 'short'
	| 'signed'
	| 'sizeof' 
	| 'static_assert'
    | 'static' 
    | 'struct' 
    | 'switch'
	| 'thread_local' 
    | 'true'
	| 'typedef'
	| 'typeof_unqual'
	| 'typeof' 			// gcc extension for pre-C23
	| 'undef'
    | 'union' 
    | 'unsigned'
    | 'void'
	| 'volatile'
	| 'warning'
    | 'while'
	| '_Alignas'
    | '_Alignof'
    | '_Atomic' 
	| '_BitInt'
	| '_Bool'
	| '_Complex'
	| '_Decimal32'
	| '_Decimal64'
	| '_Decimal128'
    | '_Generic' 
    | '_Imaginary' 
	| '_Nonnull'		// clang extension
    | '_Noreturn' 
	| '_Nullable'		// clang extension
	| '_Pragma'
    | '_Static_assert'
    | '_Thread_local'
	| '__asm__' 		// gcc extension
	| '__asm' 			// msvc extension
	| '__based' 		// msvc extension
	| '__cdecl' 		// msvc extension
	| '__clrcall' 		// msvc extension
	| '__declspec' 		// msvc declaration-specifier extensions
	| '__endptr'		// gcc extension
	// gcc extension to silence -pedantic: 
	// https://gcc.gnu.org/onlinedocs/gcc/Alternate-Keywords.html
	// apparently clang as well
	| '__extension__' 	
	| '__fastcall' 		// msvc extension
	| '__has_c_attribute'	// C23
	| '__has_embed'		// C23
	| '__has_include'	// C23
	| '__inline__'		// gcc extension
	| '__inline' 		// msvc extension
	| '__int8' 			// msvc extension
	| '__int16' 		// msvc extension
	| '__int32' 		// msvc extension
	| '__int64' 		// msvc extension
	| '__nptr'			// gcc extension
	| '__restrict__' 	// gcc extension
	| '__restrict'		// gcc extension
	| '__stdcall' 		// msvc extension
	| '__thiscall' 	    // msvc extension
	| '__thread'		// gcc with -std=c99 ctype.h on FreeBSD?
	| '__typeof__'		// gcc extension
	| '__vectorcall' 	// msvc extension
	| '__volatile__'    // gcc extension
    | '__attribute__'

pp_line(c_pp_line_expand): // breaks line and executes the preprocessor
	"#([^\\\\\n]+(\\\\\r?\n|\\\\[^\r\n])?)*\n"

token:
    pp_line | whitespace | constant | punctuator | string_literal | identifier | keyword  
	// keyword is basically unreachable. whitespace is added to remove comments. 

whitespace(skip_token):
    "([ \t\r\n\v\f]+|(\\\\\r?\n)|(//([^\\\\\n]+(\\\\\r?\n|\\\\[^\r\n])?)*\n)|(/\\*((\\*[^/])|[^*])*\\*/))+"
	// ascii ws      line cont line comment multi-line comment

identifier(c_pp_identifier): // build action checks for presence of a preprocessing macro and executes preprocessor appropriately
	"([a-zA-Z_]|\\\\[uU]([0-9a-fA-F]{4}){1,2})(([a-zA-Z_0-9]|\\\\[uU]([0-9a-fA-F]{4}){1,2}))*"
	// normalstart   unicode hex-quads          normal       unicode hex-quads

identifier_nondigit:
	  nondigit
	| universal_character_name

digit:
    "[0-9]"

nondigit:
    "[a-zA-Z_]"

universal_character_name:
	""

// includes octal and hex integer constants
int_constant:
    "(([1-9][0-9]*)|(0(x|X)[A-Fa-f0-9]+)|(0[0-7]*))(u|U|(LL)|(ll)|L|l|I|i)*"
	// normal int   hex ints             octals     suffixes         (gcc complex extension)

hex_float_constant:
    "0(x|X)((([A-Fa-f0-9]*\\.[A-Fa-f0-9]+)|([A-Fa-f0-9]+\\.))|([A-Fa-f0-9]+))p[-+]?[0-9]+[flFLiI]*"
	// normal hex          decimal hex                                       powers       suffixes with gcc complex extensions

decimal_float_constant:
    "(((([0-9]*\\.[0-9]+)|([0-9]+\\.))([eE][-+]?[0-9]+)?)|([0-9]+[eE][-+]?[0-9]+))[flFLiI]*"
    //   normal decimals               exponents           integers with exponents suffixes

float_constant:
    decimal_float_constant | hex_float_constant

enum_constant:
    identifier

char_prefix:
	"[LuU]?'"

char_suffix:
	"'"

single_c_char:
	"[^'\\\\\n]"

simple_escape_sequence:
	"\\\\['\"?\\abfnrtv]"
	// escape characters in character and string literals

octal_escape_sequence:
	"\\([0-7]{1,3})"

hexadecimal_escape_sequence:
	"\\x([0-9a-fA-F]+)"

escape_sequence:
	  simple_escape_sequence
	| octal_escape_sequence
	| hexadecimal_escape_sequence
	| universal_character_name

c_char:
	  single_c_char
	| escape_sequence

char_constant:
    "(u8|L|u|U)?'([^'\\\\\\\n]|(\\\\['\"?\\\\abfnrtv])|(\\\\([0-7]{1,3}))|(\\\\x([0-9a-fA-F]+)))+'" // char_prefix, c_char+, char_suffix
	// encoding    c-char      simple-escape         octal-escape     hex-escape

constant:
    float_constant | int_constant | char_constant | enum_constant

// check to make sure the inner double quotes work. note it doesn't necessarily capture all
// ISO escape sequences, just simple_escape_sequence
// this is literally everything between two double quotes including escaped double quotes
string_literal:
    //"(u8|u|U|L)?\"((\\\\\")|[^\"])*\"" 
	//"(u8|u|U|L)?\"((\\\\['\"?\\\\abfnrtv])|[^\"\\\\])*\"" 
	// encoding  quotes minus escape sequences
	"(u8|u|U|L)?\"([^\"\\\\\\\n]|(\\\\['\"?\\\\abfnrtv])|(\\\\([0-7]{1,3}))|(\\\\x([0-9a-fA-F]+)))*\""
	// encoding    s-char        simple-escape           octal-escape       hex-escape

	


// EXPRESSIONS

primary_expression:
	// generic_selection begins with an identifier which in postfix_expresion looks like a
    // function call but fails because it is not a list of assignment_expressions. Therefore
	// it must come before identifier.
	  generic_selection 
	| identifier
	// constant has enum_constant so to prevent normal identifiers from being categorized
	// as constants, constant must come after identifier
	| constant
	| string_literal+	// string literals may be repeated
	| '(', expression, ')'

generic_selection:
	'_Generic', '(', assignment_expression, ',', ','.generic_association, ')'

generic_association:
	('default' | type_name), ':', assignment_expression

// compound_literal must come first else () will be captured as parenthesized expression
postfix_expression:
	(compound_literal | primary_expression),    ( '[', expression, ']'
													// type_name here because of a gcc builtin
													// (used in -std=c99 complex.h) that takes
													// typename args
												| '(', ','.(type_name | assignment_expression)?, ')'
												| '.', identifier
												| '->', identifier
												| '++'
												| '--'
												)*

compound_literal:
	'(', storage_class_specifier*, type_name, ')', '{', initializer_list?, ','?, '}' // C23 makes initializer_list optional

unary_expression:
	  'sizeof', unary_expression // right-recursive
	| 'sizeof', '(', type_name, ')'
	| '_Alignof', '(', type_name, ')'
	| 'alignof', '(', type_name, ')'
	// postfix_expression can be matched by an identifier so sizeof/_Alignof operators must
	// come first
	|  postfix_expression 
	| '++', unary_expression
	| '--', unary_expression
	| unary_operator, cast_expression

unary_operator:
	  '&'
	| '*'
	| '+'
	| '-'
	| '~'
	| '!'

/*
All recursions (left and right) have been removed from the following expressions because
the build actions can greatly simplify the AST if they are not recursively defined
by greatly I mean the build actions below reduce the tree depth by up to 12 for every
single assignment expression which saves an incredible amount of memory allocations. The
recursive definitions might be slightly simpler to read but are most definitely NOT worth it
*/
cast_expression(c0nc0_pass1):
	  ('(', type_name, ')', !'{')*, unary_expression

multiplicative_expression(simplify_binary_op):
	('*' | '/' | '%').cast_expression

additive_expression(simplify_binary_op):
	('+' | '-').multiplicative_expression

shift_expression(simplify_binary_op):
	('<<' | '>>').additive_expression
	
relational_expression(simplify_binary_op):
	('<' | '>' | '<=' | '>=').shift_expression
	
equality_expression(simplify_binary_op):
	('==' | '!=').relational_expression
	
AND_expression(simplify_binary_op):
	'&'.equality_expression
	
XOR_expression(simplify_binary_op):
	'^'.AND_expression
	
OR_expression(simplify_binary_op):
	'|'.XOR_expression

logAND_expression(simplify_binary_op):
	'&&'.OR_expression

logOR_expression(simplify_binary_op):
	'||'.logAND_expression
	
conditional_expression(c0nc0_pass1):
	(logOR_expression, '?', expression, ':')*, logOR_expression

assignment_expression(c0nc0_pass1):
	(unary_expression, assignment_operator)*, conditional_expression

assignment_operator:
	  '='
	| '*='
	| '/='
	| '%='
	| '+='
	| '-='
	| '<<='
	| '>>='
	| '&='
	| '^='
	| '|='

expression:
	','.assignment_expression
	
constant_expression:
	conditional_expression

// DECLARATIONS

declaration(c_process_declaration):
	(  declaration_specifiers, ','.init_declarator?
	 | attribute_specifier+, declaration_specifiers, ','.init_declarator
	 | static_assert_declaration
	 | attribute_specifier+), ';' // attribute_declaration in spec

declaration_specifiers(c_process_declaration_specifiers):
	declaration_specifier+

// placement of msattribute: https://learn.microsoft.com/en-us/previous-versions/visualstudio/visual-studio-2010/zxk0tw93(v=vs.100)?redirectedfrom=MSDN
// but note that learn.microsoft.com has described their syntax incorrectly in places
// I posted an issue but they made all that internal now
declaration_specifier:
	  storage_class_specifier
	| type_qualifier
	| function_specifier
	| alignment_specifier
	| attribute_specifier
// compiler declaration_specifier extensions: 
// https://gcc.gnu.org/onlinedocs/gcc/Attribute-Syntax.html
// the syntax description above is horrid
	| gcc_attribute_specifier 
	| msdeclspec
	| msattribute
	| type_specifier // ensures typedef is evaluated last

init_declarator:
	declarator, gcc_attribute_specifier*, ('=', initializer)?

storage_class_specifier:
	  'auto'
	| 'constexpr'
	| 'extern'
	| 'register'
	| 'static'
	| '_Thread_local'
	| 'thread_local'
	| 'typedef'

type_specifier: // cannot be mixed with another type specifier
	  'void'
	| 'char'
	| 'short'
	| 'int'
	| '__int8' // msvc extension
	| '__int16' // msvc extension
	| '__int32' // msvc extension
	| '__int64' // msvc extension
	| 'long'
	| 'float'
	| 'double'
	| 'signed'
	| 'unsigned' 
	| '_Bool' 
	| 'bool'  
	| '_BitInt', '(', constant_expression, ')'
	| '_Complex'
	| '_Decimal32'
	| '_Decimal64'
	| '_Decimal128'
	| atomic_type_specifier
	| struct_or_union_specifier
	| enum_specifier
	| typeof_specifier
	| typedef_name

msattribute:
	  '__asm'
	| '__based'
	| '__cdecl'
	| '__clrcall'
	| '__fastcall'
	| '__inline'
	| '__stdcall'
	| '__thiscall'
	| '__vectorcall'

/* 
if the token starts with an open/close parenthesis, it cannot be alone. otherwise everything
else that doesn't start with an open/close parenthesis.
*/
non_paren:
	"([)].+)|[(].+|[^()].*" 
	
paren_block:
	'(', paren_block.(non_paren*), ')'

gcc_attribute_specifier: // gcc specific declaration_specifiers
// for some reason some function declarations in several C standard library headers have 
// __asm__ as an __attribute__
	('__attribute__' | '__asm__' | '__asm'), paren_block 
	| '__extension__', paren_block?

msdeclspec: // msvc specific declaration_specifiers
	'__declspec', '(', identifier*,')'

struct_or_union_specifier:
	  struct_or_union, attribute_specifier*, identifier?, '{', member_declaration+, '}'
	| struct_or_union, attribute_specifier*, identifier

struct_or_union:
	'struct' | 'union'

member_declaration:
	  attribute_specifier*, specifier_qualifier_list, ','.member_declarator?, 
			gcc_attribute_specifier*, ';'
	| static_assert_declaration, ';'

specifier_qualifier_list:
	// not really sure about the flexibility in the gcc attributes here.
	(type_specifier_qualifier | gcc_attribute_specifier)+, attribute_specifier* 

type_specifier_qualifier:
	  type_specifier
	| type_qualifier
	| alignment_specifier

member_declarator:
	  declarator?, ':', constant_expression
	| declarator

enum_specifier:
	  'enum', attribute_specifier*, identifier?, enum_type_specifier?, '{', 
			','.enumerator, ','?, '}'
	| 'enum', identifier, enum_type_specifier?

enumerator:
	  enum_constant, attribute_specifier*, '=', constant_expression
	| enum_constant, attribute_specifier*

enum_type_specifier:
	':', specifier_qualifier_list

atomic_type_specifier:
	'_Atomic', '(', type_name, ')'

typeof_specifier:
	  'typeof', '(', typeof_specifier_argument, ')'
	| 'typeof_unqual', '(', typeof_specifier_argument, ')'

typeof_specifier_argument:
	expression | type_name

type_qualifier:
	  'const'
	| 'volatile'
	| '__volatile__' 	// gcc extension
	| 'restrict'
	| '__endptr'		// gcc extension
	| '__nptr'			// gcc extension
	| '__restrict__' 	// gcc extension
	| '__restrict' 	 	// gcc extension...really we need 3 ways to say restrict
	| '_Atomic', !'('	// gcc pre-C11 had _Atomic as a type_qualifier that needs to be distinguished from the type_specifier
	| '_Nonnull'		// clang extension for pointers
	| '_Nullable'		// clang extension for pointers
	| '__thread'		// gcc ctype.h FreeBSD
	
function_specifier:
	  'inline' 
	| '__inline__' 	// gcc extension
	| '__inline' 	// also gcc extension. yes 3 ways to say inline, which will just be ignored
	| '_Noreturn' 
	
alignment_specifier:
	  ('_Alignas' | 'alignas'), '(', type_name, ')'
	| ('_Alignas' | 'alignas'), '(', constant_expression, ')'

declarator:
	pointer?, direct_declarator

direct_declarator: 
	(identifier, attribute_specifier*, gcc_attribute_specifier* | '(', declarator, ')'), 
		(array_declarator | function_declarator)*
	
array_declarator:
	'[', (  type_qualifier*, assignment_expression?
		  | 'static', type_qualifier*, assignment_expression
		  | type_qualifier*, 'static', assignment_expression
		  | type_qualifier*, '*'), ']', (attribute_specifier | gcc_attribute_specifier)*

function_declarator:
	'(', parameter_type_list?, ')', (attribute_specifier | gcc_attribute_specifier)*

pointer:
	// gcc_attribute_specifier for the poorly described gcc-specific attributes
	(gcc_attribute_specifier*, '*', (attribute_specifier | type_qualifier | gcc_attribute_specifier)*)+ 

parameter_type_list:
	  ','.parameter_declaration, ',', '...'
	| ','.parameter_declaration
	| '...'

parameter_declaration: // NEEDS TO BE TESTED. try line 52 of declarations.c
	  attribute_specifier*, declaration_specifiers, abstract_declarator
	| attribute_specifier*, declaration_specifiers, declarator
	| attribute_specifier*, declaration_specifiers

/*
since abstract_declarator does not have an identifier, this should not pose an ambiguity 
issue for typedef_name & identifier
*/
type_name: 
	specifier_qualifier_list, abstract_declarator?

abstract_declarator:
	// the standard is screwy here with PEGS. parameter declarations must check abstract 
	// declarators first otherwise it is never found in favor of declarators, but success
	// on only a pointer means PEG will never reach checking for declarator. The negative
	// lookahead here ensures declarators and abstract_declarators can never be mistaken
	  pointer?, direct_abstract_declarator
	| pointer, !identifier

direct_abstract_declarator:
	  ('(', abstract_declarator, ')')?, (array_abs_declarator | function_abs_declarator)+
	| '(', abstract_declarator, ')'
	

array_abs_declarator:
	'[', (  type_qualifier*, assignment_expression?
		  | 'static', type_qualifier*, assignment_expression
		  | type_qualifier*, 'static', assignment_expression
		  | '*'), ']', attribute_specifier*

function_abs_declarator:
	'(', parameter_type_list?, ')', attribute_specifier*
	
// the negative lookahead handles type inference for the typedef-identifier ambiguity
typedef_name(c_check_typedef):
	identifier, !(attribute_specifier*, '=')
	
initializer:
	assignment_expression | '{', initializer_list?, ','?, '}'

initializer_list:
	','.(designation?, initializer)

designation:
	designator+, '='

designator:
	  '[', constant_expression, ']'
	| '.', identifier
	
static_assert_declaration:
	  ('static_assert' | '_Static_assert'), '(', constant_expression, ',', string_literal, 
			')'
	| ('static_assert' | '_Static_assert'), '(', constant_expression, ')'

attribute_specifier:
	'[', '[', ','.attribute?, ']', ']'

attribute:
	attribute_token, attribute_argument_clause

attribute_token:
	  identifier
	| attribute_prefixed_token

attribute_prefixed_token:
	identifier, '::', identifier

attribute_argument_clause:
	'(', balanced_token*, ')'

non_par_brk_bra:
	"[^\\(\\[\\{)]}]+"

balanced_token:
	  ('(' | '[' | '{'), balanced_token*, ('}', ']', ')')
	| non_par_brk_bra

// STATEMENTS

/*
I do not know why the hell they broke up the statement types as they did in C23. 
C11's grammar was very straightforward. Rewrote C23 as below like C11
*/
statement:
	// gcc (only?) asm extension. grammar at https://gcc.gnu.org/onlinedocs/gcc/Extended-Asm.html
	  asm_statement 
	| labeled_statement
	| attribute_specifier*, compound_statement
	| attribute_specifier*, selection_statement
	| attribute_specifier*, iteration_statement
	| attribute_specifier*, jump_statement
	| expression_statement 

asm_statement:
	('asm' | '__asm__' | '__asm'), asm_qualifiers*, paren_block

asm_qualifiers:
	'volatile' | '__volatile__' | '__inline__' | 'inline' | 'goto'

label:
	attribute_specifier*, (  'case', constant_expression
						   | 'default'
						   | identifier), ':'
						   

labeled_statement:
	label, statement

open_scope(_open_scope):
	'{'

close_scope(_close_scope):
	'}'

compound_statement:
	open_scope, block_item*, close_scope
		
/*
for PEG parser, declaration must be check before statement in order that the identifier is 
checked as typedef first
*/
block_item:
	declaration | statement | label
	
// an earlier version put attribute_specifier first
expression_statement:
	  expression?, ';'
	| attribute_specifier+, expression, ';'
	
selection_statement:
	  'if', '(', expression, ')', statement, ('else', statement)?
	| 'switch', '(', expression, ')', statement
	
iteration_statement:
	  'while', '(', expression, ')', statement
	| 'do', statement, 'while', '(', expression, ')', ';'
	| 'for', '(', (expression?, ';' | declaration), expression?, ';', expression?, ')', 
			statement

jump_statement:
	(  'goto', identifier
	 | 'continue' 
	 | 'break' 
	 | 'return', expression?), ';'

external_declaration:
	  function_definition
	| declaration
	| ';' 
	// an empty line is apparently OK. Is this an extension? it is definitely not in the 
	// standard as an external_declaration, but it is there as an expression_statement, but
    // that can only exist in function scope. string.h in Mingw64-gcc has it.

pp_directive:
	group

group:
	group_part+

group_part:
	  if_section
	| control_line
	| text_line
	| '#', non_directive

pp_keyword:
	'if' | 'ifdef' | 'ifndef' | 'elif' | 'elifdef' | 'elifndef' | 'else' | 'endif' | 'include' | 'embed' | 'define' | 'undef' | 'line' | 'error' | 'warning' | 'pragma'

pp_check:
	'#', pp_keyword

if_section:
	if_group, elif_group*, else_group?, endif_line

if_group:
	  '#', 'if', constant_expression, newline, group_part*
	| '#', 'ifdef', identifier, newline, group_part*
	| '#', 'ifndef', identifier, newline, group_part

elif_group:
	  '#', 'elif', constant_expression, newline, group_part*
	| '#', 'elifdef', identifier, newline, group_part*
	| '#', 'elifndef', identifier, newline, group_part*

else_group:
	'#', 'else', newline, group_part*

endif_line:
	'#', 'endif', newline

control_line:
	  '#', 'include', pp_token+, newline
	| '#', 'embed', pp_token+, newline
	| '#', 'define', identifier, clparen, ','.identifier?, ')', replacement_list, newline
	| '#', 'define', identifier, clparen, '...', ')', replacement_list, newline
	| '#', 'define', identifier, clparen, ','.identifier, '...', ')', replacement_list, newline
	| '#', 'define', identifier, replacement_list, newline
	| '#', 'undef', identifier, newline
	| '#', 'line', pp_token+, newline
	| '#', 'error', pp_token*, newline
	| '#', 'warning', pp_token*, newline
	| '#', 'pragma', pp_token*, newline
	| '#', newline

text_line:
	pp_token*, newline

non_directive:
	pp_token+, newline

// need a build action because negative lookbehind is not generally available. 
// PCRE2 has it, but I don't want to depend on that library. Eventually move 
// to mine (probably won't have it) or Re2, which definitely doesn't
clparen(c_pp_lparen): 
	'('

replacement_list:
	pp_token*

defined_macro_expansion:
	 'defined', identifier
	| 'defined', '(', identifier, ')'

non_rangle:
	"[^>]+" 

header_name_tokens:
	  string_literal
	| '<', non_rangle+, '>'

has_include_expression:
	'__has_include', '(', header_name_tokens, ')'

has_embed_expression:
	'__has_embed', '(', header_name_tokens, pp_token*, ')' // this is not C23 compliant

has_c_attribute_expression:
	'__has_c_attribute', '(', pp_token+, ')'

// unlike 'token' there is no whitespace here because we need to capture the inserted newline token
// but all other whitespace and comments have already been removed
pp_token: // pp_token_exand checks for identifiers and replaces the tokens if a match is found
	  header_name_tokens
	| constant // not bothering with the idiosyncracies of constants in C23 within the grammar
	| punctuator 
	| string_literal
	| identifier

newline: 
	"\n"

function_definition:
	attribute_specifier*, declaration_specifiers, declarator, compound_statement

